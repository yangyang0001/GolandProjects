------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------- 第 1 章: GO 环境配置 -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
查看 当前系统的是 多少位的, 执行命令 uname -m

    本人 MacOS 系统, 使用如下:

    yangjianwei@yangjianweideMacBook-Pro ~ % uname -a
    Darwin ip-192-168-43-34.us-west-2.compute.internal 20.6.0 Darwin Kernel Version 20.6.0: Wed Jun 23 00:26:31 PDT 2021; root:xnu-7195.141.2~5/RELEASE_X86_64 x86_64

    yangjianwei@yangjianweideMacBook-Pro ~ % uname -m
    x86_64

开发工具
    IDEA + GO插件!

安装 GO
    本人配置如下:
    ############################################  go环境 ########################################
    export GOROOT=/usr/local/go
    export GOPATH=/Users/yangjianwei/GolandProjects
    export PATH=$PATH:$GOROOT/bin

GOROOT 表示 Go 在你的电脑上的安装位置, 它的值一般都是 $HOME/go, 当然 你也可以安装在别的地方       // 这个属性要配置, 非常重要!

GOPATH 下必须包含 src, pkg, bin 三个文件夹, 类似于 java 中的 src main java 的默认规定一样, github 上也没有给出太多的解释, 就说是规定!
    src 源文件存放地址!
    pkg 引入的包文件存放地址!
    bin 可执行文件存放地址!

GOMODULE 常用命令
    go mod init         # 初始化 go.mod
    go mod tidy         # 更新依赖文件
    go mod download     # 下载依赖文件
    go mod vendor       # 将依赖转移至本地的 vendor 文件
    go mod edit         # 手动修改依赖文件
    go mod graph        # 打印依赖图
    go mod verify       # 校验依赖

本书不适合初学者! 初学者 先看 前面的书籍!

------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------- 第 2 章: Go语言基础 --------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
iota
    这是一个特殊常量, 这个符号 遇到 const 定义时, 就是一个常量 且值 = 0!
    特性: iota 每次遇到 const 都重置为0, 同一行中的 iota 值都一致的, 下一行的 iota 值自动 +1;

init 函数
    所有参与执行的 init 函数 优先级 都 高于 main() 可以参考 001_go语言_init函数的执行过程.png!


struct 结构体
    定义格式如下:
    type 结构体名称 struct {
        ...
    }

    注意点: 注意结构体名称 和 内部属性 首字母的大小写问题!

struct 结构体中的 匿名字段问题!

struct 面向对象
    主要是 实现类似 java class 的方法, 继承 等功能!

interface
    接口的定义:
        type 接口名称 interface {
            方法名称([方法参数列表]) [返回值列表]
        }

    接口的实现:
        对比 java 的定义, 是实现所有 接口中的方法, 才能称之为 实现了接口, 这一点是一致的! 不同的是这里没有 implements 关键字

        为了标识 实现了哪个接口, 往往在 interface 中多写一个方法, 方法名称往往称之为 Implement接口名称()!

    接口的扩展:
        如果 一个 结构体A 包含了一个 结构体B, 结构体B 实现了 接口I, 那么 这个 接口I 的变量 也可以接受 结构体A 的实例!

    接口的歧义:
        因为上面的扩展, 带来的疑惑: 结构体A 只是继承了 结构体B的属性和方法, 严格来说 接口I 和 结构体A没有任何关系! 但是这里直接继承了这种特性!

    空接口:
        使用 空接口 来判定任何东西的 类型!

    接口合并:
        接口A, 接口B, 如果想使用 接口A和接口B中的合并成为一个新的接口C, 只需要使用如下的方式构造一个新的接口就可以了!

        type A interface{
            ...
        }

        type B interface {
            ...
        }

        type C interface {
            A
            B
        }

并发
    协程的概念: 代码中并发的代码统称为 协程! 协程之间沟通 不是通过传统变量, 而是通过 信道或者通道 channel!

    使用协程 的关键字: go

channel
    通道的定义: channel := make(chan int)    cap = 0

buffered channel
    定义方式: channel := make(chan int, 5)  cap = 5

select 处理不同的 channel:

    常用处理方案如下: 往往用死循环去包裹, 每次校验是否有 非阻塞 channel!

    for {
        select {
        case val0 := <-channel0
            ....
        case val1 := <-channel1
            ....
        case val2 := <-channel2
            ....
        default:
            ....
        }
    }

runtime 包中有几个处理 goroutine 的函数:
    Goexit:         退出当前执行的goroutine, 但是defer函数还会继续调用
    Gosched:        让出当前goroutine的执行权限, 调度器安排其他等待的任务运行, 并在下次某个时候从该位置恢复执行
    NumCPU:         返回 CPU 核数量
    NumGoroutine:   返回正在执行和排队的任务总数
    GOMAXPROCS:     用来设置可以并行计算的CPU核数的最大值, 并返回之前的值

------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 3 章: Web基础 ----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
web 服务:
   基于 http 协议的一种服务!

搭建一个 web 服务:

    参考 001_http_web, 其访问方式为: http://localhost:9090/?url_long=111&url_long=222

    这种访问方式, 可以使用 ? 和 & 拼接符传递参数! 也可以使用路径参数!
    request.Form 是一个 key 为 string 类型, val 为 []string 的 Map, 即为 map[string] []string!

理解 http 服务的工作过程:
    1、整个工作 过程参考 001_web服务器_http请求响应工作流程.png

    2、http web 服务是建立在 tcp 服务基础上的

总结:
    本章不能叫 Web基础, 应该叫 网络基础, 如果想看网络知识的 可以参考 java_computer_network 工程!

------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------- 第 4 章: 表单 ------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
反思:
    java web 已经非常 完善了! 那么 go 语言产生的时间 比 java 短, 可否借鉴一下 java 处理 web 方面的思想呢? 甚至翻译 java 为 go 呢?

案例:
    首先 搭建一个 go web 服务

    使用 template.ParseFiles 来处理返回的 html 文本!

注意:
    request.Form 是一个 map[string][]string 类型, key = string, value = []string 类型! 且内部提供了 Set, Get, Add, Del 方法!

验证表单的输入:
    验证方式:
        前端校验 和 后端校验!

    处理手段:
        有了 template.ParseFiles() 方法来处理 html 文本文件, 这时前端是固定的, 没有什么硬性对 前端表单进行校验, 纵然做了, 后端也会再次处理!

    正则表达校验:

        数字校验:
        if m, _ := regexp.MatchString("^[0-9]+$", request.FormValue("age")); !m {
        	return false
        }

        中文校验:
        if m, _ := regexp.MatchString("^\\p{Han}+$", request.FormValue("realname")); !m {
        	return false
        }

        英文校验:
        if m, _ := regexp.MatchString("^[a-zA-Z]+$", request.FormValue("username")); !m {
        	return false
        }

        邮件校验:
        if m, _ := regexp.MatchString(`^([\w\.\_]{2,10})@(\w{1,})\.([a-z]{2,4})$`, request.FormValue("email")); !m {
        	return false
        }

        手机校验:
        if m, _ := regexp.MatchString(`^(1[3|4|5|8][0-9]\d{4,8})$`, request.FormValue("mobile")); !m {
        	return false
        }

        身份证校验:
        //验证15位身份证, 15位的是全部数字
        if m, _ := regexp.MatchString(`^(\d{15})$`, request.FormValue("usercard")); !m {
            return false
        }

        //验证18位身份证, 18位前17位为数字, 最后一位是校验位, 可能为数字或字符X。
        if m, _ := regexp.MatchString(`^(\d{17})([0-9]|X)$`, request.FormValue("usercard")); !m {
            return false
        }

预防 JS 作为参数传递:
    // 转义输出到 client 端!
    template.HTMLEscape(response, []byte(request.FormValue("username")))

    // 非转义输出到 客户端, 如果 username 为 <script>alert()</script>, 则弹窗!
    //io.WriteString(response, request.FormValue("username"))


    // 下面的代码使用了转义 在服务端输出:
    fmt.Printf("key = %v, value = %v \n", key, template.HTMLEscapeString(request.FormValue(key)))

防止多次递交表单
    采用解决方案为
        前端使用:
            <form>
                <input type="hidden" name="token" value="{{.}}"/>
            </form>

        后端使用:
            if request.Method == http.MethodGet {
                // TODO: 生成 token
                hash := crypto.MD5.New()
                hash.Write([]byte(strconv.Itoa(time.Now().Nanosecond())))
                token := fmt.Sprintf("%x", hash.Sum(nil))

                // 将 token 写入表单中!
                temp, err := template.ParseFiles(loginFilePath)
                if err != nil {
                    log.Fatal(err)
                }
                //  TODO: 写出 token
                temp.Execute(response, token)
            } else {
                //CheckForm(request)
                //FormMethd(request)

                // TODO: 处理 token
                token := request.FormValue("token")
                if token == "" {
                    // 非法 token
                    fmt.Println("token is not legitimate!")
                    return
                } else {
                    // 再次验证 token 是否合法 .....

                    // 继续进行下面的代码
                    PrintForm(request)

                    // 转义输出到 client 端!
                    template.HTMLEscape(response, []byte(request.FormValue("username")))

                    // 非转义输出到 客户端, 如果 username 为 <script>alert()</script>, 则弹窗!
                    //io.WriteString(response, request.FormValue("username"))
                }

            }


处理文件上传
    使用 前端页面 上传文件
    使用 代码 模拟客户端 上传文件


------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------- 第 5 章: 访问数据库 --------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
go 访问数据库 基础:

    go 官方并没有提供数据库驱动! 但是提供了数据库驱动相关的接口!

    database/sql 接口

    driver 驱动


go 语言使用不同的数据库:

    使用MySQL数据库

        连接 DSN(Data Source Name) 格式可以使用 字符串, 也可以使用 mysql.Config 配置, 具体格式如下:

        字符串格式:
            user@unix(/path/to/socket)/dbname?charset=utf8
            user:password@tcp(localhost:5555)/dbname?charset=utf8
            user:password@/dbname?charset=utf8
            user:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname

        案例: db, err := sql.Open("mysql", "root:Yang199001@tcp(127.0.0.1:3306)/test?charset=utf8")

        mysql.Config 格式:
            config := mysql.Config{
                User:                 "root",
                Passwd:               "Yang199001",
                Net:                  "tcp",
                Addr:                 "127.0.0.1:3306",
                DBName:               "recordings",
                AllowNativePasswords: true,
            }

        案例: db, err = sql.Open("mysql", config.FormatDSN())

    使用SQLite数据库
        本人使用 Linux 下的 sqlite3 发现, 如果本地 使用 Navicat 图形化 连接, 还需要搭建 PHP 环境! 这里采用 本地的 sqlite3!

        如果想学习 sqlite3 的去官网, 自己下载 并熟悉相关的语法! 这里不记录讲解!


    使用PostgreSQL数据库
        安装 PostgreSQL, 并设置相关的 username password!

        sudo -s -u postgres
        psql
        CREATE USER root WITH PASSWORD 'Yang199001';
        CREATE DATABASE test;
        GRANT ALL PRIVILEGES ON DATABASE test to root;


        启动命令:
            cd /Library/PostgreSQL/15/scripts
            sh runpsql.sh

    ...
    后面的可能这辈子 也用不上, 基本上是 mysql 和 oracle 数据库!

go 使用 NoSQL 数据库 [文章中提供的有问题, 很多版本都已经过时了, 这里先记下有真么回事, 以后去官网找下!]:
    使用 redis:
        redis   的安装, 参考 java_springboot 工程!

    使用 mongoDB:
        mongoDB 的安装, 参考 java_springboot 工程! 这个案例 本人没有实现, 以后有时间 补充吧,
        因为 持久化有 MySQL, 高速缓存有 Redis, 海量存储有 ElasticSearch, 说句不好听的, 现在的 Go 是无法 和 java 掰手腕的!

------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- 第 6 章: session和数据存储 -----------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
http 的局限性:
    http 协议是一种 无状态的 应用层协议! 无法 绑定用户 和 服务端之间的状态!

解决 http 局限性的 方法:
    服务端: session
    客户端: cookie
        cookie 又根据存活时间长短分为: 会话cookie 和 持久cookie!
        会话cookie: 随着浏览器关闭自动消失, 存储位置为 内存!
        持久cookie: 是使用 setMaxAge(...) 存储在硬盘中的一种持久化文件, 每次打开浏览器输入对应的网址都会校验当前cookie是否过期!

session 和 cookie

    cookie:
        go 语言对 cookie 的操作, 原理参考: 001_cookie原理.png

    session:
        go 语言对 session 的操作, 其原理参考 002_session原理.png

        创建 session:
            创建 session 的过程大致可以分为 3步:
            1、服务端生成一个 唯一的 sessionid!
            2、将 sessionid 存储在 服务端, 可以是 内存中, 也可以持久化到 数据库或者文件中!
            3、将 sessionid 发送回 客户端!

        创建疑问:
            1、生成唯一的 sessionid 时机是什么?
            2、session 存储类型是什么? 或者 结构长什么样?
            3、session 不持久化是否会带来问题?
            4、session 写回到客户端中的时机是什么?
            5、如何断言 下一次请求的客户是否已经拥有了session?
            6、session 类比与 cookie 有没有过期机制?

        现状:
            go version 1.16 版本还没有 http session 这种类型, 处理 pc 端的 session 问题有限!

        做不做:
            想实现又不想实现
            想实现: 实战一把, 加深一下 session 存, 取, 删除, 并发等问题的理解, 甚至分布式 session 共享问题的处理, 这在 java web 中已经非常成熟!
            不想做: 需要参考已经非常成熟的 java session 机制 + go 语言规则 + 借鉴已经实现的 database/sql/driver, 实现成本太高, 本人水平也不足!

            自己实现了 并不代表官方以后不会提供, 另外想让更了解 web 机制和 处理session 更专业团队实现, 我们只使用他们提供的 接口!
            全世界通用规则开发团队 开发的包 更安全, 更高效, 更具有普世性!
            说句不好听的, 普通开发者 甚至 大陆所谓的专家 还没资格或者没有那个水平去开发这种全世界通用的规则, 基础规则的认知都不到, 这是教育体系所致!

本章到这里就结束了, 有愿意了解的可以跟随 本书作者实现一把!

------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------- 第 7 章: 文本文件处理 --------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
XML  处理


JSON 处理


正则  处理
    正则表达式 验证字符, 最常用!
    正则表达式 获取内容


模板处理

    前言概述:
        主要是针对 GoWeb 的 html 文件的处理, go 语言提供了 template 包!
        这里主要是 模仿 java 中成熟的 MVC 模式, 其发展过程为 servlet ---> jsp ---> springmvc!
        因为 go 语言发展还不够完善, 这里主要是 模仿 JSP 中的 View 层的处理!

    字段处理:
        处理机制参考: 001_template处理机制.png
        {{.FieldName}} 字段名称必须 首字母大写, 否则报错! go 语言 这种处理前端 字段的方式 离着 前后端分离 还有 至少2年的时间!

文件操作
    目录操作

        创建单个文件夹, 举例如下:
        path = "./maosan"
        os.Mkdir(path, 0777)

        创建嵌套文件夹 举例如下:
        path = "./gousi/test1/test2"
        os.MkdirAll("", 0777)

        删除单个空文件夹
        os.Remove("./maosan")

        删除文件夹 及当前文件夹下的 所有文件
        os.RemoveAll("./gousi")

    文件操作
        文件的创建
        filepath := "./football_player.txt"
        _, err := os.Create(filepath)

        文件的删除
        filepath := "./football_player.txt"
        err := os.Remove(filepath)

        文件的读取 写入 参考: file_input_output.go 或 input_output_review.go

------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 8 章: Web服务 ----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
TCP 服务端 和 客户端 案例

UDP 服务端 和 客户端 案例

WebSocket
    学习之前的疑问:
        1、什么是 WS?
        2、WS 的工作原理是什么?
        3、WS 相比于 HTTP 有什么优点?
        4、为什么使用 WS?
        5、如何实现 WS?


    解答疑问:
        1、什么是 WS?
            WS 能使服务器和浏览器之间建立全双工的传输通道进行通信的一种技术, 是 HTML5 的重要特性!

        2、WS 的工作原理是什么?
            参考 001_WebSocket工作原理.png!

        3、WS 相比于 HTTP 有什么优点?
            WS 能使服务器和一个客户端之间只做 一次 三报文握手协议 就可以建立长连接通道 即 一个 Web客户端 只建立一个 TCP 连接, 且是 长连接!
            WS 有更简单的 帧(网络原理三大特性之一:封装成帧), WS 的协议头 更轻量级!
            WS 建立的通道是全双工的, 服务器可以实时推送数据给浏览器!

        4、为什么使用 WS?
            浏览器上有一些事实查询, 原来是通过 轮询发送 Http Request 的方式访问服务端的, 这样会造成资源浪费和网络阻塞!
            有了 WS 后, 服务端一旦更新数据, 服务器 就可以推送 更新后的数据 给浏览器, 避免以上缺点!

        5、如果 编码实现 WS?
            客户端 html 写 websocket 相关的 javascript

            通过 socket = new WebSocket(wsuri); 客户端 和 服务端 创建链接, 当握手成功后, 会触发WebSocket对象的onopen事件, 告诉客户端连接已经成功建立!
            客户端一共绑定了四个事件:
            1) onopen       建立连接后触发
            2) onmessage    收到消息后触发
            3) onerror      发生错误时触发
            4) onclose      关闭连接时触发

            服务端 参考 websocket.go

            如果想实现 java 语言的 websocket 服务端, 可以参考 springboot-vue 工程中的 MineWebSocketServer!
            另外 提醒一下, websocket 可以 和 springboot 整合, 本人并没有去实现, 这在 App 直播间下行消息中很常用!

REST
    Restful 接口实现分为 三个级别
    LEVEL0      GET

    LEVEL1      GET     POST

    LEVEL2      GET     POST    DELETE     PUT      PATCH

    级别越高限制越多, 一般都通过 POST 请求内部有个 _method 字段来 间接实现 LEVEL3

RPC
    在 java 中, 这项技术非常成熟!
    在 go 语言中 还是非常麻烦的, 按协议来分 分为 基于 TCP, 和基于 HTTP 的!

    go mod edit -replace deepblue.com/inaction_03/chapter_08/rpc_objects=../005_rpc_objects
    go mod tidy

    使用 RPC 必须使用遵循以下规则:
    1、提取出 rpc_objects 包, 书写 struct 并且 实现当前结构体的方法, 结构体方法必须遵循 002_Go语言RPC基础规则.png 中的基础规则!
    2、书写 server 和 client 端!

------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 9 章: 安全与加密 --------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
处理指令逻辑闭环漏洞攻击, 其他的所有网络攻击都是 攻击者伪装成合法用户 进行操作!

CSRF 攻击 (跨站请求伪造, Cross-site request forgery 也被称为: one click attack/session riding, 缩写为: CSRF/XSRF)

    攻击原理参考: 001_CSRF攻击原理.png, 完成 CSRF 攻击必须满足以下三步:
        1、访问目标地址
        2、本地存储了目标地址相关的 cookie
        3、在 cookie 未失效时, 访问了 攻击者能够获取 cookie 的网络连接!

    如何防止:
        1、合理使用 GET, POST, Cookie
        2、在非 GET 请求中 添加 隐藏提交的 token, 后台进行校验!

    具体的参考 src/inaction_03_web/chapter_07/004_template 文件夹中的 方案!

XSS 攻击
    跨站脚本攻击, Cross Site Scripting, 安全专家们通常将其缩写成 XSS

    如何预防XSS
        答案很简单, 坚决不要相信用户的任何输入, 并过滤掉输入中的所有特殊字符。这样就能消灭绝大部分的XSS攻击。

        目前防御XSS主要有如下几种方式:
        1、过滤特殊字符
            避免XSS的方法之一主要是将用户所提供的内容进行过滤, Go语言提供了HTML的过滤函数:
            text/template包下面的HTMLEscapeString、JSEscapeString等函数

        2、使用HTTP头指定类型 `w.Header().Set("Content-Type","text/javascript")` 这样就可以让浏览器解析javascript代码, 而不会是html输出。

避免SQL注入
    SQL注入攻击该如何来防治呢? 下面这些建议或许对防治SQL注入有一定的帮助。
    
    1、严格限制Web应用的数据库的操作权限, 给此用户提供仅仅能够满足其工作的最低权限, 从而最大限度的减少注入攻击对数据库的危害。
    
    2、检查输入的数据是否具有所期望的数据格式, 严格限制变量的类型, 例如使用regexp包进行一些匹配处理, 或者使用strconv包对字符串转化成其他基本类型的数据进行判断。
    
    3、对进入数据库的特殊字符（'"\尖括号&*;等）进行转义处理, 或编码转换。Go 的text/template包里面的HTMLEscapeString函数可以对字符串进行转义处理。
    
    4、所有的查询语句建议使用数据库提供的参数化查询接口, 参数化的语句使用参数而不是将用户输入变量嵌入到SQL语句中, 即不要直接拼接SQL语句。
　　　　例如使用database/sql里面的查询函数Prepare和Query, 或者Exec(query string, args ...interface{})。
    
    5、在应用发布之前建议使用专业的SQL注入检测工具进行检测, 以及时修补被发现的SQL注入漏洞。网上有很多这方面的开源工具, 例如sqlmap、SQLninja等。
    
    6、避免网站打印出SQL错误信息, 比如类型错误、字段不匹配等, 把代码里的SQL语句暴露出来, 以防止攻击者利用这些错误信息进行SQL注入。

加密和解密数据
    go 语言的加密算法太难用, 有兴趣的可以参考 java_security 工程去了解相关的 加密解密学!



------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 10 章: 国际化和本地化 ---------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
想学习的 跟着操作一遍吧! 说实在的有 中英文翻译, 甚至多语言翻译, 这种东西 属于 比较鸡肋的东西!

什么是 Locale? 如何进行设置?




------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 11 章: 错误处理, 调试和测试 ----------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
自定义 error, 这里说两种方式:
    1、直接使用 errors.New("")


    2、实现 error 接口
        type error interface {
            Error() string
        }

        举例:
        type MineError struct {
            message string
        }

        func (mineError *MineError) Error() string {
            return mineError.message
        }

        TODO: 使用 这种 error 时, 必须注意 使用引用 接收 error 变量! err := &MineError{"...."}


defer recover panic 的处理方式, 同级捕获 panic 和 冒泡捕获!

    同级捕获案例:
        defer func() {
            if err := recover(); err != nil {
                fmt.Printf("error = %v \n", err)
            }
        }()
        panic(MineError{"this is the same level error!"})

    冒泡捕获案例:
        defer func() {
    		if err := recover(); err != nil {
    			fmt.Printf("error = %v \n", err)
    		}
    	}()

    	func() {
    		panic(MineError{"this is the bubble level error!"})
    	}()

GDB 调试:
    推荐使用:
        本人开发工具是 IntelliJ IDEA 安装 GO 插件, 这个插件本身就可以调试, 改为调试文件就可以了! 这和调试 java 没有任何区别!

    GDB 调试:
        可以参考 java_hotspot_action 工程中对 jvm 的调试! jvm 是 C++ 语言书写! 不同的是这里是 调试 go 语言!

测试用例:
    这种东西怎么说呢? 有用也没用, 工作后你就知道了, 日本开发是比较严格的, 这块还是要看看; 如果是在大陆这块你就了解吧, 把代码写正确就可以了!

------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 12 章: 部署与维护 -------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
中国有不少企业的产品 都采用 独立部署!

本人推荐 Docker 服务的部署!

------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 13 章: 如何设计一个Web框架 -----------------------------------------------
--------------------------------------------------------- 第 14 章: 扩展Web框架 -----------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
这两章 目前了解吧, 毕竟框架也不是说开发就开发的, 这种东西类似于 java 的 springwebmvc 要兼容的东西太多, 开发出来也未必实用!
想 学习和了解 自己跟着走一遍吧, 可以对 Web 软件员有比较大的启发!











