------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------- 第1章: Go 语言的起源, 发展与普及 --------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
学习地址: https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md

------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------- 第2章: 安装与运行环境 ------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
这里列举几个最为重要的环境变量: 

$GOROOT 表示 Go 在你的电脑上的安装位置, 它的值一般都是 $HOME/go, 当然, 你也可以安装在别的地方。       // 这个属性要配置, 非常重要!
$GOARCH 表示目标机器的处理器架构, 它的值可以是 386、amd64 或 arm。
$GOOS   表示目标机器的操作系统, 它的值可以是 darwin、freebsd、linux 或 windows。
$GOBIN  表示编译器和链接器的安装位置, 默认是 $GOROOT/bin, 如果你使用的是 Go 1.0.3 及以后的版本, 一般情况下你可以将它的值设置为空,
        Go 将会使用前面提到的默认值。

为了区分本地机器和目标机器, 你可以使用 $GOHOSTOS 和 $GOHOSTARCH 设置本地机器的操作系统名称和编译体系结构, 这两个变量只有在进行交叉编译的时候才会用到,
如果你不进行显示设置, 他们的值会和本地机器($GOOS 和 $GOARCH)一样。

$GOPATH 默认采用和 $GOROOT 一样的值, 但从 Go 1.1 版本开始, 你必须修改为其它路径。它可以包含多个 Go 语言源码文件、包文件和可执行文件的路径,
        而这些路径下又必须分别包含三个规定的目录: src、pkg 和 bin, 这三个目录分别用于存放源码文件、包文件和可执行文件。

        // 这个环境变量非常重要, 需要配置! 从 Go 1.1 版本开始, 就必须要配置到 和 $GOROOT 不一样的其他路径了!
        // GOPATH 下包含三个目录: src, pkg, bin 三个目录!

$GOARM  专门针对基于 arm 架构的处理器, 它的值可以是 5 或 6, 默认为 6。
$GOMAXPROCS 用于设置应用程序可使用的处理器个数与核数。

在 MacOS 上安装环境变量:

本人配置如下:
    ############################################  go环境 ########################################
    export GOROOT=/usr/local/go
    export GOPATH=/Users/yangjianwei/GolandProjects
    export PATH=$PATH:$GOROOT/bin

GOPATH 下必须包含 src, pkg, bin 三个文件夹, 类似于 java 中的 src main java 的默认规定一样, github 上也没有给出太多的解释, 就说是规定!
    src 源文件存放地址!
    pkg 引入的包文件存放地址!
    bin 可执行文件存放地址!

垃圾回收器:
    Go 语言采用的是 标记-清除 算法进行垃圾回收! gc 和 gccgo 的垃圾回收器在开发中!
    Java 中的垃圾回收器算法 新生代都为 标记-复制算法, 因为有 Eden 区 和 Survivor 区! 老年代和持久代(元空间) 采用 标记-清除 和 标记-整理算法!

调试器:
    GDB 调试, 请参考 java_hotspot_action 工程中的 GDB, 这种在 C++中使用的非常多, 这里推荐如下的调试方式, 使用打印!
    
    在 fmt.Printf 中使用下面的说明符来打印有关变量的相关信息: 
    
    %+v     打印包括字段在内的实例的完整信息
    %#v     打印包括字段和限定类型名称在内的实例的完整信息
    %T      打印某个类型的完整说明


go 与 其他语言进行交互:

    与 C 进行交互:
        这时候要注意, 引用的时候必须 要用到 如下的写法, 否则报错! 中间有一行空格都不行!

        // #include <stdlib.h>
        import "C"

    与 C++ 进行交互:



------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------ 第 4 章: 基本结构和基本数据类型 -------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
文件名, 关键字 和 标识符

    文件名:
    go 语言文件 都以 .go 文件结尾! 文件名称都是小写字母, 且只能由 小写字母和下划线组成!

    关键字:
    go 语言中提供了 25 个关键字 或 保留字, 如下:
    break       default	        func	    interface	select
    case	    defer	        go	        map	        struct
    chan	    else	        goto	    package	    switch
    const	    fallthrough	    if	        range	    type
    continue    for	            import	    return	    var

    标识符:
    以字母 或 下划线开头, 其他的一律认为是无效的标识符, 当然标识符不能是 关键字! go 语言还有 36 个预定义标识符, 如下:
    append	bool	byte	cap	        close	complex	    complex64	complex128	uint16
    copy	false	float32	float64	    imag	int	        int8	    int16	    uint32
    int32	int64	iota	len	        make	new	        nil	        panic	    uint64
    print	println	real	recover	    string	true	    uint	    uint8	    uintptr

go 程序的基本结构和要素

    举例: hello world 程序

包的概念, 导入 和 可见性

    包名称必须是 小写字母! 一个包中可能包含很多个 .go 文件! 这种文件
    
    包的查找过程:
    如果包名不是以 . 或 / 开头, 如 "fmt" 或者 "container/list", 则 Go 会在全局文件进行查找; 
    如果包名以 ./ 开头, 则 Go 会在相对目录中查找; 
    如果包名以  / 开头(在 Windows 下也可以这样使用), 则会在系统的绝对路径中查找。

    标准库也叫基础库:
    对比与 java 来说, 类似 java 底层的环境包, 这里的 的基础库也包含了众多包, 类似于 fmt os 等!

    go 语言的编译过程:
    假设 A.go 依赖 B.go,  B.go 依赖 C.go , 编译过程为 C.go, B.go, A.go ;

    可见性规则:

    当标识符 (包括常量、变量、类型、函数名、结构体字段等等) 以一个大写字母开头, 如: Group1,
    那么使用这种形式的标识符的对象就可以被外部包的代码所使用(客户端程序需要先导入这个包), 这被称为导出 (像面向对象语言中的 public)!

    当标识符 (包括常量、变量、类型、函数名、结构体字段等等) 如果以小写字母开头, 如: group1,
    则对包外是不可见的, 但是它们在整个包的内部是可见并且可用的 (像面向对象语言中的 private)!


go 程序的执行过程如下:
    1、按照 main 包中导入的顺序, 导入包
    2、如果被导入的包也导入了包, 则递归执行第1步!
    3、导入完成后, 进行变量等的初始化, 如果有 init 方法则执行 init 方法!
    4、一切完成后, 执行 main 包中的 main() 方法!

类型的转换:

    类型转化的格式:
    类型 B 的值 = 类型 B(类型 A 的值), 即 B := typeB(A), 这里的 typeB 就是你想转换的类型!

    举例:
    var a int  = 10;
    b := float(a)

常量
    const 常量名称 [常量类型] = 常量值! 这里是不能使用 := 声明的!

    常量值, 不能是函数 或者 函数表达式, 因为 go 语言规定, 常量值 必须是在编译期间 能够确定的值, 因此必须使用确定值!
        错误案例: const a = getNumber()
        正确案例: const a = 10

    常量可以并行定义, 看如下的案例都是可以的
        const a, b, c = "hello", 10, 100.0

    特性:
        如果没有赋值, 则自动使用上一行的赋值语句!

    iota
        这是一个特殊常量, 这个符号 遇到 const 定义时, 就是一个常量 且值 = 0!

        特性: 同一行中的 iota 值都一致的, 下一行的 iota 值自动 +1; 

变量
    使用关键字 var 进行定义, 使用格式如下:

    var 变量名称 [变量类型]

    变量类型中有一种比较特殊的类型 指针, 表示方式为 *type! 举例如下:


    值类型 和 引用类型
    go 语言中 除了指针类型都属于值类型, 只有指针类型才是 引用类型! 像 string, 数组, 结构体都属于 值类型!

    基本类型获取地址 使用 &, 而 数组 和 结构体类型的地址获取 则需要先试用指针指向引用, 再使用 & 才能够获取地址! 举例如下:

    int i int  =10, 获取地址使用 &i

    type Mine struct {

    }
    var mine Mine = Mine {}
    var addr *Mine = &mine; 获取 mine 地址使用 &addr

    简短声明语句
        使用格式 := , 这是一种声明语句, 同一个变量 只能使用一次!
        a := 10

    init 函数, 优先级高于 main() 方法!

基本类型和运算符

    &&  与运算,　   和 其他语言的运算一致!
    ||  或运算,　   同上
    !   非运算,　   同上
    ==  等值判断,   同上
    !=  不等判断,   同上

    混合类型的使用规则:
        变量的混合类型使用规则: 必须使用强制类型转换才能使用!
        常量的混合类型使用规则: 可以使用 +; 可以参考案例!

    优先级 	运算符
     7 		^ !
     6 		* / % << >> & &^
     5 		+ - | ^
     4 		== != < <= >= >
     3 		<-
     2 		&&
     1 		||

字符串
    解释字符串
    \n: 换行符
    \r: 回车符
    \t: tab 键
    \u 或 \U: Unicode 字符
    \\: 反斜杠自身

    非解释字符串
    `json:"name"`

时间

指针
    常量 和 字面量不能使用指针获取地址, 编译通不过!


------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------- 第 5 章: 控制结构 ----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
if-else 结构
    使用格式 如下:

    if condition {
        // do something
    }

    if condition {

    } else {

    }

    if condition1 {

    } else if condition2 {

    } else {

    }

多返回值的测试
    逗号 OK 模式: 即 , ok 的多返回值形式!

switch 结构

    使用格式如下:

    switch variable {
    case var1:  {}

    case var2:  {}

    case var3:  {}
    ...
    case varN:  {}

    default:
    }

for 结构
    根据 func reverse(str string), 这里的交换 和 java, C, C++ 中的两个变量交换是不一样的!

    var i, j = 10
    i, j = j, i

break 和 continue

标签 和 goto
    尽量不要使用 goto 语句, 这样会破坏程序的可读性, 也和我们自上而下的执行顺序 有冲突, 这块不推荐!


------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------- 第 6 章: 函数 -----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
文件书写规范:
    尽量将 main() 方法放在 文件的前面!

函数:
    在 go   语言中, 方法重载是不允许的, 这是规定!
    在 java 语言中, 方法的重载, 方法同名不同参, 不以方法的返回值类型作为标志!

    函数也可以声明, 没有函数体 {}

值传递 和 引用传递:

    在 go 语言中 函数默认都是 按值传递的! 几乎在任何情况下, 按引用传递 都比 按值传递 要快的多!

    在函数调用时, 像切片 (slice)、字典 (map)、接口 (interface)、通道 (channel) 这样的引用类型都是默认使用引用传递 (即使没有显式的指出指针)!


函数参数为 变长参数:
    在 go 语言中 如果传递不定长的参数, 只能在最后一个参数中使用, 使用格式为 param ... type, 举例如下:
    func Mine(a int, param ... string) {

    }

    在 java 语言中的使用 和 go 语言基本一致, 举例如下:
    public static void execute(int a, String ... strings) {

    }

defer
    在 go 语言中提供了一种类似于 stack 的语法, 符合 先进后出 或者 后进先出的 栈的特性!

    经典 使用场景 如下 (都是一些 收尾工作):
        1、关闭文件流
        // open a file
        defer file.Close()

        2、解锁一个加锁的资源
        mu.Lock()
        defer mu.Unlock()

        3、打印最终报告
        printHeader()
        defer printFooter()

        4、关闭数据库链接
        // open a database connection
        defer disconnectFromDB()

    案例中有一个 打印结果的案例 f3()


内置函数:
    内置函数名称                  函数使用说明
    
    close()	                    用于管道通信
    
    len()、cap()	            len() 用于返回某个类型的长度或数量(字符串、数组、切片、map 和管道);
                                cap() 是容量的意思, 用于返回某个类型的最大容量(只能用于数组、切片和管道, 不能用于 map)

    new()、make()	            new() 和 make() 均是用于分配内存: 
                                new() 用于值类型和用户定义的类型, 如自定义结构; make 用于内置引用类型(切片、map 和管道)。
                                
                                它们的用法就像是函数, 但是将类型作为参数: new(type)、make(type)。new() 是一个函数, 不要忘记它的括号。
                                
                                new(T)  分配类型 T 的零值并返回其地址, 也就是指向类型 T 的指针; 它也可以被用于基本类型: v := new(int)。
                                make(T) 返回类型 T 的初始化之后的值, 因此它比 new() 进行更多的工作。

                        
    copy()、append()	        用于复制和连接切片
    
    panic()、recover()	        两者均用于错误处理机制
    
    print()、println()	        底层打印函数, 在部署环境中建议使用 fmt 包
    
    complex()、real ()、imag()	用于创建和操作复数

递归函数

    两个案例: 斐波那契数列, 阶乘!


函数作为 方法参数

函数作为 方法结果

计算函数执行时间

------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------- 第 7 章: 数组与切片 ------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
声明 和 初始化
    声明格式为: var name [len]type  举例: var arr [5]int

切片 slice
    切片是数组的一个连续片段, 这块片段和数组共享一块内存! 切片是可变长的数组, 数组则不能变长!

    假设 a 是一个数组, b 是 数组 a 的切片, 切片 a 包含 a[1] a[2] 两个元素!
    b := a[1:3] 表示 a index [1, 3) 的一个区间! b 就是数组 [1, 2];

    最常用的方式 var arr []int

将 切片 传递给函数

使用 make 创建切片

new() 和 make() 的区别:     参考 new_make内置函数的区别.png
    new()   只分配内存, 不初始化!
    make()  分配内存, 进行0值初始化!

bytes包
    bytes 包中有一个非常重要的 buffer 类! 这个类是对 字符串的拼接是非常有用的!

切片总结:
    最常用方式: var name []type, 这样就可以自动扩充了, 扩充的速度为 2倍 方式!
    len(arr) = 1, cap(arr) = 1, arr = [0]
    len(arr) = 2, cap(arr) = 2, arr = [0 1]
    len(arr) = 3, cap(arr) = 4, arr = [0 1 2]
    len(arr) = 4, cap(arr) = 4, arr = [0 1 2 3]
    len(arr) = 5, cap(arr) = 8, arr = [0 1 2 3 4]
    len(arr) = 6, cap(arr) = 8, arr = [0 1 2 3 4 5]
    len(arr) = 7, cap(arr) = 8, arr = [0 1 2 3 4 5 6]
    len(arr) = 8, cap(arr) = 8, arr = [0 1 2 3 4 5 6 7]
    len(arr) = 9, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8]
    len(arr) = 10, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8 9]
    len(arr) = 11, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8 9 10]
    len(arr) = 12, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8 9 10 11]
    len(arr) = 13, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12]
    len(arr) = 14, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12 13]
    len(arr) = 15, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
    len(arr) = 16, cap(arr) = 16, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
    len(arr) = 17, cap(arr) = 32, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]
    len(arr) = 18, cap(arr) = 32, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17]
    len(arr) = 19, cap(arr) = 32, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]
    len(arr) = 20, cap(arr) = 32, arr = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]

    以上验证了 容量的扩容方式为 2倍的 扩容方式!
















