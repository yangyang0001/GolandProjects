------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------- 第1章: Go 语言的起源, 发展与普及 --------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
学习地址: https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md

------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------- 第2章: 安装与运行环境 ------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
这里列举几个最为重要的环境变量: 

$GOROOT 表示 Go 在你的电脑上的安装位置, 它的值一般都是 $HOME/go, 当然, 你也可以安装在别的地方。       // 这个属性要配置, 非常重要!
$GOARCH 表示目标机器的处理器架构, 它的值可以是 386、amd64 或 arm。
$GOOS   表示目标机器的操作系统, 它的值可以是 darwin、freebsd、linux 或 windows。
$GOBIN  表示编译器和链接器的安装位置, 默认是 $GOROOT/bin, 如果你使用的是 Go 1.0.3 及以后的版本, 一般情况下你可以将它的值设置为空,
        Go 将会使用前面提到的默认值。

为了区分本地机器和目标机器, 你可以使用 $GOHOSTOS 和 $GOHOSTARCH 设置本地机器的操作系统名称和编译体系结构, 这两个变量只有在进行交叉编译的时候才会用到,
如果你不进行显示设置, 他们的值会和本地机器（$GOOS 和 $GOARCH）一样。

$GOPATH 默认采用和 $GOROOT 一样的值, 但从 Go 1.1 版本开始, 你必须修改为其它路径。它可以包含多个 Go 语言源码文件、包文件和可执行文件的路径,
        而这些路径下又必须分别包含三个规定的目录: src、pkg 和 bin, 这三个目录分别用于存放源码文件、包文件和可执行文件。

        // 这个环境变量非常重要, 需要配置! 从 Go 1.1 版本开始, 就必须要配置到 和 $GOROOT 不一样的其他路径了!
        // GOPATH 下包含三个目录: src, pkg, bin 三个目录!

$GOARM  专门针对基于 arm 架构的处理器, 它的值可以是 5 或 6, 默认为 6。
$GOMAXPROCS 用于设置应用程序可使用的处理器个数与核数。

在 MacOS 上安装环境变量:

本人配置如下:
    ############################################  go环境 ########################################
    export GOROOT=/usr/local/go
    export GOPATH=/Users/yangjianwei/GolandProjects
    export PATH=$PATH:$GOROOT/bin

GOPATH 下必须包含 src, pkg, bin 三个文件夹, 类似于 java 中的 src main java 的默认规定一样, github 上也没有给出太多的解释, 就说是规定!
    src 源文件存放地址!
    pkg 引入的包文件存放地址!
    bin 可执行文件存放地址!

垃圾回收器:
    Go 语言采用的是 标记-清除 算法进行垃圾回收! gc 和 gccgo 的垃圾回收器在开发中!
    Java 中的垃圾回收器算法 新生代都为 标记-复制算法, 因为有 Eden 区 和 Survivor 区! 老年代和持久代(元空间) 采用 标记-清除 和 标记-整理算法!

调试器:
    GDB 调试, 请参考 java_hotspot_action 工程中的 GDB, 这种在 C++中使用的非常多, 这里推荐如下的调试方式, 使用打印!
    
    在 fmt.Printf 中使用下面的说明符来打印有关变量的相关信息: 
    
    %+v     打印包括字段在内的实例的完整信息
    %#v     打印包括字段和限定类型名称在内的实例的完整信息
    %T      打印某个类型的完整说明


go 与 其他语言进行交互:

    与 C 进行交互:
        这时候要注意, 引用的时候必须 要用到 如下的写法, 否则报错! 中间有一行空格都不行!

        // #include <stdlib.h>
        import "C"

    与 C++ 进行交互:



















































